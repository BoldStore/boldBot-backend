// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl"]
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  email        String    @unique
  facebook_id  String?   @unique
  name         String?
  firebase_uid String    @unique
  profile_pic  String?
  pages        Page[]
  messages     Message[]

  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  Subscription Subscription?
  Transaction  Transaction[]

  @@map("users")
}

model Page {
  id                String @id @default(auto()) @map("_id") @db.ObjectId
  user              User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId            String
  page_access_token String
  page_id           String @unique
  page_name         String
  insta_id          String @unique @default("")

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  messages  Message[]

  @@map("pages")
}

model Message {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
  page   Page   @relation(fields: [pageId], references: [id], onDelete: Cascade)
  pageId String

  type     String
  question String?

  texts Text[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("messages")
}

model Text {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  message   Message @relation(fields: [messageId], references: [id], onDelete: Cascade)
  messageId String

  key   String
  value String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("texts")
}

model PricingPlan {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  price       Int
  description String

  ice_breakers Int @default(0)
  ice_breaker_replies Int @default(0)

  persistent_messages    Int @default(0)
  persistent_message_replies Int @default(0)

  custom_texts       Int @default(0)
  custom_text_replies Int @default(0)

  greetings   Int @default(0)

  period    String
  interval  Int
  currency String @default("INR")

  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  Subscription Subscription[]
  Transaction  Transaction[]

  @@map("pricingPlans")
}

model Subscription {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  plan   PricingPlan? @relation(fields: [planId], references: [id], onDelete: Cascade)
  planId String

  user   User?  @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @unique

  startsAt  DateTime @default(now())
  expiresAt DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("subscriptions")
}

model Transaction {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  plan     PricingPlan @relation(fields: [planId], references: [id], onDelete: Cascade)
  planId   String
  amount   Int
  currency String

  status String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("transactions")
}
