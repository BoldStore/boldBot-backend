// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl"]
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Lead {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  insta_username String   @unique
  createdAt      DateTime @default(now())

  @@map("leads")
}

model User {
  id           String  @id @default(auto()) @map("_id") @db.ObjectId
  email        String  @unique
  facebook_id  String? @unique
  name         String?
  firebase_uid String  @unique
  profile_pic  String?

  pages    Page[]
  messages Message[]

  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  subscriptions Subscription[]
  transactions  Transaction[]

  @@map("users")
}

model Page {
  id                   String  @id @default(auto()) @map("_id") @db.ObjectId
  user                 User    @relation(fields: [userId], references: [id], onDelete: SetNull)
  userId               String
  page_access_token    String
  page_id              String  @unique
  page_name            String
  insta_id             String  @unique @default("")
  insta_profile_pic    String?
  facebook_profile_pic String?
  insta_username       String? @unique

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  messages  Message[]

  @@map("pages")
}

model Message {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
  page   Page   @relation(fields: [pageId], references: [id], onDelete: Cascade)
  pageId String

  type     String
  question String?

  texts Text[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("messages")
}

model Text {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  message   Message @relation(fields: [messageId], references: [id], onDelete: Cascade)
  messageId String

  key   String
  value String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("texts")
}

model MessageType {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  name        String @unique
  description String

  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  PlanTypeRelation PlanTypeRelation[]

  @@map("message_types")
}

model PlanTypeRelation {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  message_type  MessageType @relation(fields: [messageTypeId], references: [id], onDelete: Cascade)
  messageTypeId String      @map("message_type")

  plan   PricingPlan @relation(fields: [planId], references: [id], onDelete: Cascade)
  planId String      @map("plan")

  number_of_replies     Int @default(0)
  total_allowed_replies Int @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("plan_type_relations")
}

model PricingPlan {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  price       Int
  description String

  plan_type_relations PlanTypeRelation[]

  days     Int
  currency String @default("INR")

  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  Transaction  Transaction[]
  Subscription Subscription[]

  @@map("pricingPlans")
}

model Subscription {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  transaction   Transaction @relation(fields: [transactionId], references: [id], onDelete: Cascade)
  transactionId String      @unique

  plan   PricingPlan @relation(fields: [planId], references: [id], onDelete: Cascade)
  planId String

  startsAt  DateTime @default(now())
  expiresAt DateTime

  status String @default("active")
}

model Transaction {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  plan     PricingPlan @relation(fields: [planId], references: [id], onDelete: Cascade)
  planId   String
  amount   Int
  currency String

  status String @default("pending")

  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  Subscription Subscription?

  @@map("transactions")
}
