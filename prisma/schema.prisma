// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl"]
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum TransactionStatus {
  PENDING
  CONFIRMED
  REJECTED
}

enum SubscriptionStatus {
  ACTIVE
  INACTIVE
  QUEUED
}

model Lead {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  insta_username String   @unique
  createdAt      DateTime @default(now())

  @@map("leads")
}

model User {
  id           String  @id @default(auto()) @map("_id") @db.ObjectId
  email        String  @unique
  facebook_id  String? @unique
  name         String?
  firebase_uid String  @unique
  profile_pic  String?
  stats        Stats?

  pages    Page[]
  messages Message[]

  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  Transaction  Transaction[]
  Subscription Subscription[]
  MessageCount MessageCount[]
  CustomerUser CustomerUser[]

  @@map("users")
}

model Stats {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  user   User   @relation(fields: [userId], references: [id])
  userId String @unique

  page   Page   @relation(fields: [pageId], references: [id])
  pageId String

  services ServiceAmountRelation[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("service_amount_relations")
}

model Page {
  id                   String  @id @default(auto()) @map("_id") @db.ObjectId
  user                 User    @relation(fields: [userId], references: [id], onDelete: SetNull)
  userId               String
  page_access_token    String
  page_id              String  @unique
  page_name            String
  insta_id             String  @unique @default("")
  insta_profile_pic    String?
  facebook_profile_pic String?
  insta_username       String? @unique

  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  messages     Message[]
  Transaction  Transaction[]
  Subscription Subscription[]
  Stats        Stats[]
  MessageCount MessageCount[]

  @@map("pages")
}

model Message {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
  page   Page   @relation(fields: [pageId], references: [id], onDelete: Cascade)
  pageId String

  type     String
  question String?

  texts Text[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("messages")
}

model Text {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  message   Message @relation(fields: [messageId], references: [id], onDelete: Cascade)
  messageId String

  key   String
  value String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("texts")
}

model Services {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  name        String @unique
  description String

  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
  ServiceAmountRelation ServiceAmountRelation[]
  MessageCount          MessageCount[]

  @@map("services")
}

model ServiceAmountRelation {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  service   Services @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  serviceId String   @db.ObjectId

  amount  Int @default(0)
  replies Int @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Stats     Stats?   @relation(fields: [statsId], references: [id])
  statsId   String?  @db.ObjectId

  plan   Plan?   @relation(fields: [planId], references: [id])
  planId String? @db.ObjectId
}

model Plan {
  id          String                  @id @default(auto()) @map("_id") @db.ObjectId
  name        String                  @unique
  description String
  price       Int
  services    ServiceAmountRelation[]
  days        Int

  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  transactions  Transaction[]
  subscriptions Subscription[]

  @@map("plans")
}

model Transaction {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: SetNull)
  userId String

  page   Page   @relation(fields: [pageId], references: [id], onDelete: SetNull)
  pageId String

  plan   Plan              @relation(fields: [planId], references: [id], onDelete: SetNull)
  planId String
  amount Int
  status TransactionStatus @default(PENDING)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("transactions")
}

model Subscription {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: SetNull)
  userId String

  page   Page   @relation(fields: [pageId], references: [id], onDelete: SetNull)
  pageId String

  transaction   Plan   @relation(fields: [transactionId], references: [id], onDelete: SetNull)
  transactionId String

  startsAt DateTime?
  endsAt   DateTime?

  status SubscriptionStatus @default(ACTIVE)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("subscriptions")
}

model MessageCount {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: SetNull)
  userId String

  page   Page   @relation(fields: [pageId], references: [id], onDelete: SetNull)
  pageId String

  service   Services? @relation(fields: [serviceId], references: [id], onDelete: SetNull)
  serviceId String

  customer   Customer? @relation(fields: [customerId], references: [id], onDelete: SetNull)
  customerId String?

  createdAt DateTime @default(now())

  @@map("message_count")
}

model Customer {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  name     String
  username String @unique
  insta_id String @unique

  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  MessageCount MessageCount[]
  CustomerUser CustomerUser[]

  @@map("customers")
}

model CustomerUser {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  user   User   @relation(fields: [userId], references: [id], onDelete: SetNull)
  userId String

  customer   Customer @relation(fields: [userId], references: [id], onDelete: SetNull)
  customerId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("customer_user_relations")
}
